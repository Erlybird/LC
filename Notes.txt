1. boolean arrays, the default value is false, but the array itself is initialized to null until you explicitly create the array and assign it a reference

2.  arr = new boolean[H1_Helper][];
        //initialzing with the number of rows, columns have to be instantiated separately for each row
        // arr[i][j] represents an array with ith row and jth column

3. In binary search the initialization of mid variable should be inside the while loop of (left <= right)

4. Binary Search: if we are able to reduce the search space by half always without exception or increase the search space by 2x

5. In Search in 2D sorted Matrix: mid element is found out by dividing the mid number with the no. of columns because we can know the row number only when we know the number of columns.

6. primes[(int)(c-'a')] - will give the integer value of difference of ASCII values of char c and 'a', but , you can directly write it as primes[c-'a']

7. In the problem containing products and you don't know how big the number could be use Double instead of Integer, because Integer may go out of bounds and may not give the results as expected.

8. List<List<Integer> lst = new ArrayList<>(); - initiate like this for ArrayList<Arraylist<Integer>>

9. There are a total of 256 ASCII values and <space> is the first Ascii character and 'a' is the first alphabet

10. Shortcut - ternary operator
   if(l1 != null) {
	int val1 = l1.val;
	} else{
		val1 = 0;
		}

this can be written as 
int val1 = (l1 != null)?l1.val:0;

11.public string[] split( String regex, int limit){
}
The limit parameter can have 3 values 
limit > 0 – If this is the case, then the pattern will be applied at most limit-1 times, the resulting array’s length will not be more than n, and the resulting array’s last entry will contain all input beyond the last matched pattern.
limit < 0 – In this case, the pattern will be applied as many times as possible, and the resulting array can be of any size.
limit = 0 – In this case, the pattern will be applied as many times as possible, the resulting array can be of any size, and trailing empty strings will be discarded.

12. we can create an arrayList directly with the keys of a Hashmap by using this
	List<Charcter> aList = new ArrayList<>(map1.keySet());

13. Sorting with comparator example
	Collections.sort(array,(a,b) -> a-b) => this sorting gives ascending order 
	similaryly .. collections.sort(array, (a.b) -> b-a) => this gives descending order but the time complexity would be NlogN.
14.

	